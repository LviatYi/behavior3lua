[
    {
        "desc": "始终返回失败",
        "doc": "+ 只能有一个子节点,多个仅执行第一个\n+ 不管子节点是否成功都返回失败\n",
        "name": "AlwaysFail",
        "type": "Decorator"
    },
    {
        "desc": "始终返回成功",
        "doc": "+ 只能有一个子节点,多个仅执行第一个\n+ 不管子节点是否成功都返回成功\n",
        "name": "AlwaysSuccess",
        "type": "Decorator"
    },
    {
        "desc": "攻击",
        "input": [
            "{目标}"
        ],
        "name": "Attack",
        "type": "Action"
    },
    {
        "args": [
            {
                "desc": "值",
                "name": "value",
                "type": "code?"
            }
        ],
        "desc": "检查True或False",
        "doc": "+ 做简单数值公式判定，返回成功或失败\n",
        "name": "Check",
        "type": "Condition"
    },
    {
        "desc": "清除变量",
        "name": "Clear",
        "output": [
            "清除的变量名"
        ],
        "type": "Action"
    },
    {
        "args": [
            {
                "desc": "值",
                "name": "value",
                "type": "code?"
            },
            {
                "desc": ">",
                "name": "gt",
                "type": "int?"
            },
            {
                "desc": ">=",
                "name": "ge",
                "type": "int?"
            },
            {
                "desc": "==",
                "name": "eq",
                "type": "int?"
            },
            {
                "desc": "<=",
                "name": "le",
                "type": "int?"
            },
            {
                "desc": "<",
                "name": "lt",
                "type": "int?"
            }
        ],
        "desc": "比较值大小",
        "doc": "+ 若值为空，返回失败\n+ 非整数类型可能会报错\n",
        "input": [
            "值(int)"
        ],
        "name": "Cmp",
        "type": "Condition"
    },
    {
        "args": [
            {
                "desc": "x",
                "name": "x",
                "type": "int?"
            },
            {
                "desc": "y",
                "name": "y",
                "type": "int?"
            },
            {
                "desc": "宽",
                "name": "w",
                "type": "int?"
            },
            {
                "desc": "高",
                "name": "h",
                "type": "int?"
            },
            {
                "desc": "查找上限",
                "name": "count",
                "type": "string?"
            }
        ],
        "desc": "查找敌人",
        "doc": "+ 没找到返回失败\n",
        "name": "FindEnemy",
        "output": [
            "目标单位"
        ],
        "type": "Condition"
    },
    {
        "desc": "遍历数组",
        "doc": "+ 每次执行子节点前会设置当前遍历到的变量\n+ 会执行所有子节点\n+ 永远返回成功/正在运行\n",
        "input": [
            "[{数组}]"
        ],
        "name": "ForEach",
        "output": [
            "{变量}"
        ],
        "type": "Composite"
    },
    {
        "desc": "获取生命值",
        "name": "GetHp",
        "output": [
            "生命值"
        ],
        "type": "Action"
    },
    {
        "desc": "待机",
        "name": "Idle",
        "type": "Action"
    },
    {
        "desc": "If判断",
        "doc": "+ 拥有三个子节点(至少两个)\n+ 当第一个子节点返回SUCCESS的时候执行第二个子节点并返回此子节点的返回值\n+ 否则执行第三个子节点并返回这个节点的返回值,若无第三个子节点,则返回FAIL\n",
        "name": "IfElse",
        "type": "Composite"
    },
    {
        "args": [
            {
                "desc": "事件",
                "name": "builtin",
                "options": [
                    {
                        "name": "无",
                        "value": "<none>"
                    },
                    {
                        "name": "行为树被中断",
                        "value": "treeInterrupted"
                    },
                    {
                        "name": "行为树开始执行前",
                        "value": "beforeRunTree"
                    },
                    {
                        "name": "行为树执行完成后",
                        "value": "afterRunTree"
                    },
                    {
                        "name": "行为树执行成功后",
                        "value": "afterRunTreeSuccess"
                    },
                    {
                        "name": "行为树执行失败后",
                        "value": "afterRunTreeFailure"
                    }
                ],
                "type": "enum"
            },
            {
                "desc": "自定义事件",
                "name": "event",
                "type": "string?"
            }
        ],
        "desc": "侦听行为树事件",
        "doc": "+ 当事件触发时，执行第一个子节点，多个仅执行第一个\n+ 如果子节点返回 「运行中」，会中断执行并清理执行栈\n",
        "name": "Listen",
        "type": "Decorator"
    },
    {
        "args": [
            {
                "desc": "日志",
                "name": "message",
                "type": "string"
            }
        ],
        "desc": "打印日志",
        "name": "Log",
        "type": "Action"
    },
    {
        "args": [
            {
                "desc": "次数",
                "name": "count",
                "type": "int?"
            }
        ],
        "desc": "循环执行",
        "input": [
            "次数(int)?"
        ],
        "name": "Loop",
        "type": "Composite"
    },
    {
        "args": [
            {
                "desc": "x",
                "name": "x",
                "type": "int"
            },
            {
                "desc": "y",
                "name": "y",
                "type": "int"
            }
        ],
        "desc": "移动到坐标",
        "name": "MoveToPos",
        "type": "Action"
    },
    {
        "desc": "移动到目标",
        "input": [
            "{目标}"
        ],
        "name": "MoveToTarget",
        "type": "Action"
    },
    {
        "desc": "取反",
        "doc": "+ 将子节点的返回值取反\n",
        "name": "Not",
        "type": "Decorator"
    },
    {
        "desc": "取反",
        "doc": "+ 将子节点的返回值取反\n",
        "name": "Not",
        "type": "Decorator"
    },
    {
        "desc": "获取当前时间",
        "name": "Now",
        "output": [
            "当前时间"
        ],
        "type": "Action"
    },
    {
        "desc": "只执行一次",
        "doc": "+ 只能有一个子节点,多个仅执行第一个\n+ 被打断后该节点后的子节点依旧不会执行\n+ 该节点执行后永远返回成功\n",
        "name": "Once",
        "type": "Decorator"
    },
    {
        "desc": "并行执行",
        "doc": "执行所有子节点并返回成功\n",
        "name": "Parallel",
        "type": "Composite"
    },
    {
        "args": [
            {
                "desc": "最大循环次数",
                "name": "maxLoop",
                "type": "int?"
            }
        ],
        "desc": "一直尝试直到子节点返回失败",
        "doc": "+ 只能有一个子节点，多个仅执行第一个\n+ 只有当子节点返回失败时，才返回成功，其它情况返回运行中状态\n+ 如果设定了尝试次数，超过指定次数则返回失败\n",
        "input": [
            "最大循环次数?"
        ],
        "name": "RepeatUntilFailure",
        "type": "Decorator"
    },
    {
        "args": [
            {
                "desc": "最大循环次数",
                "name": "maxLoop",
                "type": "int?"
            }
        ],
        "desc": "一直尝试直到子节点返回成功",
        "doc": "+ 只能有一个子节点，多个仅执行第一个\n+ 只有当子节点返回成功时，才返回成功，其它情况返回运行中状态\n+ 如果设定了尝试次数，超过指定次数则返回失败\n",
        "input": [
            "最大循环次数?"
        ],
        "name": "RepeatUntilSuccess",
        "type": "Decorator"
    },
    {
        "desc": "选择执行",
        "doc": "+ 一直往下执行，有子节点返回成功则返回成功，若全部节点返回失败则返回失败\n+ 子节点是或 (OR) 的关系\n",
        "name": "Selector",
        "type": "Composite"
    },
    {
        "desc": "顺序执行",
        "doc": "+ 一直往下执行，只有当所有子节点都返回成功, 才返回成功\n+ 子节点是与（AND）的关系\n",
        "name": "Sequence",
        "type": "Composite"
    },
    {
        "args": [
            {
                "desc": "时间/tick",
                "name": "time",
                "type": "int"
            }
        ],
        "desc": "等待",
        "name": "Wait",
        "type": "Action"
    }
]